import random
import os
import logging
import telebot
from dotenv import load_dotenv, dotenv_values

from Database import Database
import info

logging.basicConfig(filename="MechmatSupportBot.log", level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')

load_dotenv()

random_emojis_list = "üòáü§©üòçüòúü§Øüòé"
API_KEY = os.getenv("API_KEY")
bot = telebot.TeleBot(API_KEY)
db = Database()

options_list = ["–ê–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—É", "–°—Ç—É–¥–µ–Ω—Ç—É", "–û–ü –ú–ú–§", "–ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", "–Ü–Ω—à–µ", "–î–∞—Ç–∏ –ø—Ä–∏–π–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó", "–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤—Å—Ç—É–ø—É", "–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–æ—Å–µ–ª–µ–Ω–Ω—è", "–ì–∞–π–¥ –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è–º", "–¢—Ä–∏—Ç–æ–Ω", "–ö–∞—Ñ–µ–¥—Ä–∏", "–ü–æ—à—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤", "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏", "–ü—Ä–µ–∑–∏–¥—ñ—è", "–Ø–∫ –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è?", "–ú–∞—é —ñ–¥–µ—é!", "–¢–ì–ö –û–ü –ú–ú–§", "–¢–ì–ö –ú–ú–§", "–Ü–Ω—Å—Ç–∞ –ú–ú–§", "–§–µ–π—Å–±—É–∫ –ú–ú–§", "–°–∞–π—Ç —Å—Ç—É–¥–º—ñ—Å—Ç–∞", "–°–∞–π—Ç –ú–ú–§", "–ö–∞—Ä—Ç–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É", "–ö–∞—Ä—Ç–∞ –¥–æ —Å—Ç–æ–ª–æ–≤–∫–∏ –Ω–∞ —Ñ—Ä–µ–∫—Å—ñ üòé"]


def get_start_markup():
    keyboard = [
        [
            telebot.types.InlineKeyboardButton("–ê–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—É ‚òÄÔ∏è", callback_data="–ê–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—É"),
            telebot.types.InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç—É üë®‚Äçüéì", callback_data="–°—Ç—É–¥–µ–Ω—Ç—É")],
        [telebot.types.InlineKeyboardButton("–û—Ñ—ñ—Å –ü—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫—ñ–≤ –ú–ú–§ üèõÔ∏è", callback_data="–û–ü –ú–ú–§")],
        [telebot.types.InlineKeyboardButton("–Ü–Ω—à–µ ü¶ù", callback_data="–Ü–Ω—à–µ")],
        [telebot.types.InlineKeyboardButton("–ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", callback_data="–ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")],
        [telebot.types.InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É üì¨", callback_data="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")],
        [telebot.types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –º—î–º üêß", callback_data="–ü–æ–∫–∞–∑–∞—Ç–∏ –º—î–º")]
    ]
    markup = telebot.types.InlineKeyboardMarkup(keyboard)
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    # check if user exists:
    if (not db.is_user_exists_by_chat_id(call.message.chat.id)):
        db.add_user_by_chat_id(call.message.chat.id)
    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if (call.data == "–ê–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—É"):
        bot.send_message(call.message.chat.id, "–©–æ —Å–∞–º–µ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=get_abit_markup())
    elif (call.data == "–°—Ç—É–¥–µ–Ω—Ç—É"):
        bot.send_message(call.message.chat.id, "–©–æ —Å–∞–º–µ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=get_student_markup())
    elif (call.data == "–û–ü –ú–ú–§"):
        bot.send_message(call.message.chat.id, "–©–æ —Å–∞–º–µ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=get_op_markup())
    elif (call.data == "–ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"):
        bot.send_message(call.message.chat.id, "–©–æ —Å–∞–º–µ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=get_links_markup())
    elif (call.data == "–Ü–Ω—à–µ"):
        bot.send_message(call.message.chat.id, "–©–æ —Å–∞–º–µ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=get_other_markup())
    elif (call.data == "–ü–æ–∫–∞–∑–∞—Ç–∏ –º—î–º"):
        bot.send_message(call.message.chat.id, info.tg_channel_matematika_dlya_ienota_html, parse_mode="HTML")
        bot.send_message(call.message.chat.id, info.tg_channel_sixy_prime_html, parse_mode="HTML", reply_markup=get_back_markup())
    elif (call.data == "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É"):
        db.set_user_delivery_by_chat_id(call.message.chat.id, True)
        bot.send_message(call.message.chat.id, "–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É, –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å: /check_delivery")

    # –ê–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—É
    elif (call.data == "–î–∞—Ç–∏ –ø—Ä–∏–π–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó"):
        bot.send_message(call.message.chat.id, info.dates_of_the_admissions_committee, reply_markup=get_back_markup())
    elif (call.data == "–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤—Å—Ç—É–ø—É"):
        bot.send_message(call.message.chat.id, info.documenty_dlya_vstupu, reply_markup=get_back_markup())
        # bot.send_photo(call.message.chat.id, photo=open('resources/vstup_docs.png', 'rb'), reply_markup=get_back_markup())
    elif (call.data == "–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–æ—Å–µ–ª–µ–Ω–Ω—è"):
        bot.send_message(call.message.chat.id, info.documenty_dlya_poselennya, parse_mode="HTML", reply_markup=get_back_markup())
        # bot.send_photo(call.message.chat.id, photo=open('resources/poselennya_docs.png', 'rb'), reply_markup=get_back_markup())

    # –û–ü –ú–ú–§
    elif (call.data == "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏"):
        bot.send_message(call.message.chat.id, "–©–æ —Å–∞–º–µ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=get_department_markup())
    elif (call.data == "–ü—Ä–µ–∑–∏–¥—ñ—è"):
        bot.send_message(call.message.chat.id, info.presidium, reply_markup=get_back_markup())

    # –û–ü –ú–ú–§ -> –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏
    elif (call.data == "–ö—É–ª—å—Ç—É—Ä–Ω–æ-–º–∏—Å—Ç–µ—Ü—å–∫–∏–π"):
        bot.send_message(call.message.chat.id, info.cultural_department, reply_markup=get_back_markup())
    elif (call.data == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π"):
        bot.send_message(call.message.chat.id, info.informational_department, reply_markup=get_back_markup())
    elif (call.data == "–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π"):
        bot.send_message(call.message.chat.id, info.department_of_sports, reply_markup=get_back_markup())
    elif (call.data == "–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞"):
        bot.send_message(call.message.chat.id, info.partnerships_department, reply_markup=get_back_markup())
    elif (call.data == "–†–æ–±–æ—Ç–∞ –∑ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞–º–∏"):
        bot.send_message(call.message.chat.id, info.abit_department, reply_markup=get_back_markup())

    # –Ü–Ω—à–µ
    elif (call.data == "–ö–∞—Ä—Ç–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É"):
        bot.send_message(call.message.chat.id, "–ö–∞—Ä—Ç–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É:")
        bot.send_photo(call.message.chat.id, photo=open('resources/faculty_map_1.jpg', 'rb'))
        bot.send_photo(call.message.chat.id, photo=open('resources/faculty_map_2.jpg', 'rb'), reply_markup=get_back_markup())
    elif (call.data == "–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏"):
        bot.send_message(call.message.chat.id, info.library_info, reply_markup=get_back_markup())

    elif (call.data == info.main_page_button_text):
        bot.send_message(call.message.chat.id,
                 f"–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –∑ –º–µ—Ö–∞–Ω—ñ–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É –ö–ù–£ {random_emojis_list[random.randint(0, len(random_emojis_list) - 1)]}. –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —ñ–¥–µ—é –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É.",
                 reply_markup=get_start_markup())
    else:
        bot.send_message(call.message.chat.id,
                 f"–¶–µ–π —Ä–æ–∑–¥—ñ–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ üôÅ.",
                 reply_markup=get_back_markup())

def get_abit_markup():
    keyboard = [
        [telebot.types.InlineKeyboardButton("–î–∞—Ç–∏ –ø—Ä–∏–π–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó üìÖ", callback_data="–î–∞—Ç–∏ –ø—Ä–∏–π–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó")],
        [telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤—Å—Ç—É–ø—É üìÑ", callback_data="–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤—Å—Ç—É–ø—É")],
        [telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–æ—Å–µ–ª–µ–Ω–Ω—è üìÉ", callback_data="–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–æ—Å–µ–ª–µ–Ω–Ω—è")],
        [telebot.types.InlineKeyboardButton("–ì–∞–π–¥ –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è–º ‚öôÔ∏è", callback_data="–ì–∞–π–¥ –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è–º")],
        [telebot.types.InlineKeyboardButton(info.main_page_button_text, callback_data=info.main_page_button_text)]
    ]
    markup = telebot.types.InlineKeyboardMarkup(keyboard)
    return markup

def get_student_markup():
    keyboard = [
        [telebot.types.InlineKeyboardButton("–¢—Ä–∏—Ç–æ–Ω", callback_data="–¢—Ä–∏—Ç–æ–Ω"),
         telebot.types.InlineKeyboardButton("–ö–∞—Ñ–µ–¥—Ä–∏", callback_data="–ö–∞—Ñ–µ–¥—Ä–∏")],
        [telebot.types.InlineKeyboardButton("–ü–æ—à—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤", callback_data="–ü–æ—à—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤")],
        [telebot.types.InlineKeyboardButton(info.main_page_button_text, callback_data=info.main_page_button_text)]
    ]
    markup = telebot.types.InlineKeyboardMarkup(keyboard)
    return markup

def get_op_markup():
    keyboard = [
        [telebot.types.InlineKeyboardButton("–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏ üè¨", callback_data="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏"),
         telebot.types.InlineKeyboardButton("–ü—Ä–µ–∑–∏–¥—ñ—è üíº", callback_data="–ü—Ä–µ–∑–∏–¥—ñ—è")],
        [telebot.types.InlineKeyboardButton("–Ø–∫ –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è?", callback_data="–Ø–∫ –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è?")],
        [telebot.types.InlineKeyboardButton("–ú–∞—é —ñ–¥–µ—é! üí°", callback_data="–ú–∞—é —ñ–¥–µ—é!?")],
        [telebot.types.InlineKeyboardButton(info.main_page_button_text, callback_data=info.main_page_button_text)]
    ]
    markup = telebot.types.InlineKeyboardMarkup(keyboard)
    return markup

def get_department_markup():
    keyboard = [
        [telebot.types.InlineKeyboardButton("–ö—É–ª—å—Ç—É—Ä–Ω–æ-–º–∏—Å—Ç–µ—Ü—å–∫–∏–π ü•≥", callback_data="–ö—É–ª—å—Ç—É—Ä–Ω–æ-–º–∏—Å—Ç–µ—Ü—å–∫–∏–π")],
        [telebot.types.InlineKeyboardButton("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π üîä", callback_data="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π")],
        [telebot.types.InlineKeyboardButton("–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π ‚öΩ", callback_data="–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π")],
        [telebot.types.InlineKeyboardButton("–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ ü§ù", callback_data="–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞")],
        [telebot.types.InlineKeyboardButton("–†–æ–±–æ—Ç–∞ –∑ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞–º–∏ ‚úåÔ∏è", callback_data="–†–æ–±–æ—Ç–∞ –∑ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞–º–∏")],
        [telebot.types.InlineKeyboardButton(info.main_page_button_text, callback_data=info.main_page_button_text)]
    ]
    markup = telebot.types.InlineKeyboardMarkup(keyboard)
    return markup


def get_links_markup():
    keyboard = [
        [telebot.types.InlineKeyboardButton("–°–∞–π—Ç –ú–ú–§", url=info.mmf_url),
         telebot.types.InlineKeyboardButton("–°–∞–π—Ç —Å—Ç—É–¥–º—ñ—Å—Ç–∞", url=info.studmisto_url)],
        [telebot.types.InlineKeyboardButton("–§–µ–π—Å–±—É–∫ –ú–ú–§", url=info.mmf_facebook_url),
         telebot.types.InlineKeyboardButton("–Ü–Ω—Å—Ç–∞ –ú–ú–§", url=info.mmf_instagram_url)],
        [telebot.types.InlineKeyboardButton("–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –ú–ú–§", url=info.mmf_tg_channel),
         telebot.types.InlineKeyboardButton("–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –û–ü –ú–ú–§", url=info.mmf_op_tg_channel)],
        [telebot.types.InlineKeyboardButton("–¢–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç", url=info.mmf_tg_abit_chat),
         telebot.types.InlineKeyboardButton("–Æ—Ç—É–± –ú–ú–§", url=info.mmf_youtube)],
        [telebot.types.InlineKeyboardButton(info.main_page_button_text, callback_data=info.main_page_button_text)]
    ]
    markup = telebot.types.InlineKeyboardMarkup(keyboard)
    return markup

def get_other_markup():
    keyboard = [
        [telebot.types.InlineKeyboardButton("–ö–∞—Ä—Ç–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É üó∫Ô∏è", callback_data="–ö–∞—Ä—Ç–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É")],
        [telebot.types.InlineKeyboardButton("–ö–∞—Ä—Ç–∞ –¥–æ —Å—Ç–æ–ª–æ–≤–∫–∏ –Ω–∞ —Ñ—Ä–µ–∫—Å—ñ üòé", callback_data="–ö–∞—Ä—Ç–∞ –¥–æ —Å—Ç–æ–ª–æ–≤–∫–∏ –Ω–∞ —Ñ—Ä–µ–∫—Å—ñ üòé")],
        [telebot.types.InlineKeyboardButton("–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ üìö", callback_data="–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏")],
        [telebot.types.InlineKeyboardButton(info.main_page_button_text, callback_data=info.main_page_button_text)]
    ]
    markup = telebot.types.InlineKeyboardMarkup(keyboard)
    return markup

def get_back_markup():
    keyboard = [
        [telebot.types.InlineKeyboardButton(info.main_page_button_text, callback_data=info.main_page_button_text)]
    ]
    markup = telebot.types.InlineKeyboardMarkup(keyboard)
    return markup

@bot.message_handler(commands=['check_delivery'])
def start_message(message):
    if (not db.is_user_exists_by_chat_id(message.chat.id)):
        db.add_user_by_chat_id(message.chat.id)
    if (db.get_user_delivery_by_chat_id(message.chat.id) == 1):
        bot.reply_to(message, "–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É", reply_markup=get_back_markup())
    else:
        bot.reply_to(message, "–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É", reply_markup=get_back_markup())

@bot.message_handler(commands=['start'])
def start_message(message):
    if (not db.is_user_exists_by_chat_id(message.chat.id)):
        db.add_user_by_chat_id(message.chat.id)
    bot.reply_to(message,
                 f"–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –∑ –º–µ—Ö–∞–Ω—ñ–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É –ö–ù–£ {random_emojis_list[random.randint(0, len(random_emojis_list) - 1)]}. –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —ñ–¥–µ—é –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É.",
                 reply_markup=get_start_markup())

def send_delivery_for_all_users(message):
    delivery_chat_id_list = db.get_delivery_chat_id_list()
    for chat_id in delivery_chat_id_list:
        bot.send_message(chat_id, message)

def send_delivery_for_all_users_interface():
    while True:
        send_delivery_for_all_users(input("Enter message: "))
    
@bot.message_handler(func=lambda message: True)
def universal_message(message):
    if (not db.is_user_exists_by_chat_id(message.chat.id)):
        db.add_user_by_chat_id(message.chat.id)
    try:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –í–∞—Å. –í–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏.", reply_markup=get_back_markup())
    except Exception as ex:
        logging.critical(f"{ex} happened...")

def main():
    bot.infinity_polling()

if __name__ == "__main__":
    main()
